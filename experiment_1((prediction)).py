# -*- coding: utf-8 -*-
"""Experiment-1((prediction)).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aaqicpBfqfKAo1TrsGWinRMRAuvMZnVm
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

"""# **Loading The Dataset**"""

df = pd.read_csv('Experiment1_modified(3-10).csv')
df

"""# **Feature Engineering**"""

df.describe()

df.info()

df.isnull().sum()

df.shape

df = df.drop(columns=['Animal ID','Group','Timepoint (min)','insulin range'])
df

import seaborn as sns
import matplotlib.pyplot as plt

sns.heatmap(df.corr(),annot=True)

sns.pairplot(df)

df.hist()
plt.tight_layout()

plt.scatter(df['Triglycerides (mg/dL)'],df['Insulin (ng/mL)'],label='Glucose vs Insulin')
plt.title("Scatter plot between Triglycerides  vs Insulin")
plt.xlabel("Triglycerides (mg/dL)")
plt.ylabel('Insulin')
plt.legend()
plt.show()

plt.scatter(df['Glucose (mg/dL)'],df['Insulin (ng/mL)'],label='Glucose vs Insulin')
plt.title("Scatter plot between Glucose vs Insulin")
plt.xlabel("Glucose")
plt.ylabel('Insulin')
plt.legend()
plt.show()

"""# **Cross Validation**"""

from sklearn.model_selection import train_test_split

x = df.drop(columns='Insulin (ng/mL)')
y = df['Insulin (ng/mL)']

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2)

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
numerical_val = ['Glucose (mg/dL)','Triglycerides (mg/dL)','Insulin (ng/mL)']
df[numerical_val] = scaler.fit_transform(df[numerical_val])
df

from sklearn.linear_model import LinearRegression

Lmodel = LinearRegression()
Lmodel.fit(x_train,y_train)

predict = Lmodel.predict(x_test)
predict

plt.scatter(y_test,predict)
plt.plot(y_test,y_test,'r')
plt.xlabel(' Test Data')
plt.ylabel('Predicted ')
plt.show()

from sklearn.metrics import mean_squared_error

mse = mean_squared_error(y_test,predict)
mse

from sklearn.ensemble import RandomForestRegressor,AdaBoostRegressor



Rmodel = RandomForestRegressor(n_estimators=1000,random_state=42)
Rmodel.fit(x_train,y_train)

Predict = Rmodel.predict(x_test)
Predict

Mse = mean_squared_error(y_test,Predict)
Mse

Amodel = AdaBoostRegressor(n_estimators=1000,random_state=42)
Amodel.fit(x_train,y_train)

Apredict = Amodel.predict(x_test)
Apredict

aMSE = mean_squared_error(y_test,Apredict)
aMSE

score = [Mse,aMSE]
Models = ["RandomForest","AdaBoost"]
plt.bar(Models,score)
plt.xlabel("Models")
plt.ylabel("MSE")
plt.title("RandomForest vs AdaBoost")
plt.show()

Rrmse = np.sqrt(Mse)
Armse = np.sqrt(aMSE)

Rrmse

Armse